import os
import pickle
from google.auth.transport.requests import Request
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from email.mime.text import MIMEText
from base64 import urlsafe_b64encode
import httpx

SCOPES = ['https://www.googleapis.com/auth/gmail.send', 'https://www.googleapis.com/auth/gmail.compose', 'https://www.googleapis.com/auth/gmail.modify', 'https://www.googleapis.com/auth/gmail.readonly']

CLIENT_SECRET_FILE = 'credentials.json'

def authenticate_gmail():
    """Authenticate the user and return the Gmail API service."""
    creds = None
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)
    return build('gmail', 'v1', credentials=creds)

async def create_message(to, subject, message):
    """Create a message for an email and call /elaborate to process the message."""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post("http://localhost:1000/elaborator", json={"input": ("ELABORATE THIS EMAIL IN THE FIRST PERSON. USE THE NECESSARY SALUTATIONS. \n\nEMAIL SUBJECT: " + subject + ".\n\nEMAIL BODY: " + message), "purpose": "Email"})

            if response.status_code == 200:
                elaborated_message = response.json().get("message", message)
            else:
                elaborated_message = message

        msg = MIMEText(
            elaborated_message
            + "\n\nThis email was sent via Sentient, a personal AI companion with agentic integrations and graph memory.\n\nLearn more at https://existence.technology/sentient\n\n Emails are generated by AI models and may not always be accurate or contextually relevant."
        )
        msg["to"] = to
        msg["subject"] = subject
        raw = urlsafe_b64encode(msg.as_bytes()).decode()
        return raw
    except Exception as error:
        raise Exception(f"Error creating message: {error}")
    
async def send_email(to, subject, body):
    """Send an email using the Gmail API."""
    try:
        service = authenticate_gmail()
        message_body = {"raw": await create_message(to, subject, body)}  
        service.users().messages().send(userId="me", body=message_body).execute()
        return {"status": "success", "result": "Email sent successfully."}
    except Exception as error:
        return {"status": "failure", "error": str(error)}

async def create_draft(to, subject, body):
    """Create a draft email using the Gmail API."""
    try:
        service = authenticate_gmail()
        message_body = {"raw": await create_message(to, subject, body)} 
        draft = service.users().drafts().create(userId="me", body={"message": message_body}).execute()
        return {"status": "success", "result": f"Draft created successfully with ID: {draft['id']}"}
    except Exception as error:
        return {"status": "failure", "error": str(error)}

def search_inbox(query):
    """Search the Gmail inbox for emails matching the query."""
    try:
        service = authenticate_gmail()
        results = service.users().messages().list(userId="me", q=query).execute()
        messages = results.get('messages', [])
        email_data = []
        for message in messages[:5]:
            msg = service.users().messages().get(userId="me", id=message['id']).execute()
            snippet = msg.get('snippet', 'No snippet available')
            email_data.append({"id": message['id'], "snippet": snippet})
        return {"status": "success", "result": email_data}
    except Exception as error:
        return {"status": "failure", "error": str(error)}

# Example usage (you'll need to run this in an async environment):
# import asyncio
# async def main():
#     result = await send_email("recipient@example.com", "Test Email", "This is a test email body.")
#     print(result)

#     result = await create_draft("recipient@example.com", "Draft Email", "This is a test draft email body.")
#     print(result)

#     result = search_inbox("test")
#     print(result)

# if __name__ == "__main__":
#     asyncio.run(main())